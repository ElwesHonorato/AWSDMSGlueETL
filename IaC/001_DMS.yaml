AWSTemplateFormatVersion: 2010-09-09
Description:  Migrating a Database with DMS (https://learn.cantrill.io courses)
Metadata:
  LICENSE: Apache License Version 2.0
Parameters:
  awsVPC:
    Description: 'Data Processing VPC'
    Type: 'String'
    Default: 'DataProcessingVPC'
  LatestAmiId:
    Description: AMI for Instance (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  awsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref awsVPC
  awsInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: awsIGW
  awsInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref awsVPC
      InternetGatewayId: !Ref awsInternetGateway
  awsPublicRouteTable: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC
      Tags:
      - Key: Name
        Value: awsPublicRT
  awsPrivateRouteTable: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC
      Tags:
      - Key: Name
        Value: awsPrivateRT
  awsDefaultV4Route: 
    Type: 'AWS::EC2::Route'
    DependsOn: awsInternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: awsPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: awsInternetGateway
  awsPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.48.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicA
  awsPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.112.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicB
  awsPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.32.0/20
      Tags:
        - Key: Name
          Value: aws-privateA
  awsPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.96.0/20
      Tags:
        - Key: Name
          Value: aws-privateB
  awsPublicARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetA
      RouteTableId:
        Ref: awsPublicRouteTable
  awsPublicBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetB
      RouteTableId:
        Ref: awsPublicRouteTable
  awsPrivateARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetA
      RouteTableId:
        Ref: awsPrivateRouteTable
  awsPrivateBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetB
      RouteTableId:
        Ref: awsPrivateRouteTable
  awsSecurityGroupDB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref awsVPC
      GroupDescription: Control access to the DB EC2 Instance
      SecurityGroupIngress: 
        - Description: 'Allow MySQL IPv4 IN'
          IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow MySQL IPv4 IN'
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: '0.0.0.0/0'
  awsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  awsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref awsRole
  
