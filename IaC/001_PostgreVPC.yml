AWSTemplateFormatVersion: 2010-09-09
Description:  'PostGreSQL VPC'
Parameters:
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: a4lwordpress
    Description: The WordPress database name
    MaxLength: '64'
    MinLength: '1'
    Type: String
  DBPassword:
    AllowedPattern: '^[A-Za-z][a-zA-Z0-9@%$_-]{8,41}$'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The WordPress database admin account password
    MaxLength: '41'
    MinLength: '8'
    Default: 'cats-dogs-rabbits-chickens'
    Type: String
  DBRootPassword:
    AllowedPattern: '^[A-Za-z][a-zA-Z0-9@%$_-]{8,41}$'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: PostGreSQL root password
    Default: 'cats-dogs-rabbits-chickens'
    MaxLength: '41'
    MinLength: '8'
    Type: String
  DBUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: The WordPress database admin account username
    Default: a4lwordpress
    MaxLength: '16'
    MinLength: '1'
    Type: String
Resources:
  awsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/22
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ~SourceawsVPC
  awsInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: awsIGW
  awsInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref awsVPC
      InternetGatewayId: !Ref awsInternetGateway
  awsPublicRouteTable: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC
      Tags:
      - Key: Name
        Value: awsPublicRT
  awsPrivateRouteTable: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref awsVPC
      Tags:
      - Key: Name
        Value: awsPrivateRT
  awsDefaultV4Route: 
    Type: 'AWS::EC2::Route'
    DependsOn: awsInternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: awsPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: awsInternetGateway
  awsPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.16.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicA
  awsPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 172.16.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-publicB
  awsPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.16.2.0/24
      Tags:
        - Key: Name
          Value: aws-privateA
  awsPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 172.16.3.0/24
      Tags:
        - Key: Name
          Value: aws-privateB
  awsPublicARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetA
      RouteTableId:
        Ref: awsPublicRouteTable
  awsPublicBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPublicSubnetB
      RouteTableId:
        Ref: awsPublicRouteTable
  awsPrivateARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetA
      RouteTableId:
        Ref: awsPrivateRouteTable
  awsPrivateBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref awsPrivateSubnetB
      RouteTableId:
        Ref: awsPrivateRouteTable
  # awsSecurityGroupWeb:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     VpcId: !Ref awsVPC
  #     GroupDescription: Control access to the Web EC2 Instance
  #     SecurityGroupIngress: 
  #       - Description: 'Allow HTTP IPv4 IN'
  #         IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: '0.0.0.0/0'
  #       - Description: 'Allow SSH IPv4 IN'
  #         IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         CidrIp: '0.0.0.0/0'
  awsSecurityGroupDB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref awsVPC
      GroupDescription: Control access to the DB EC2 Instance
      SecurityGroupIngress: 
        - Description: 'Allow PostGreSQL IPv4 IN'
          IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: '0.0.0.0/0'

# A4L-POSTGRESQL-SOURCE
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: SourceA4LDBSNGROUP
      DBSubnetGroupDescription: Subnet Source A4LDBSNGROUP
      SubnetIds:
        - !Ref awsPrivateSubnetA
        - !Ref awsPrivateSubnetB

     
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      DBParameterGroupName: DBParamenterMySQLReplication
      Description: Parameter group for setting binary logging format to ROW
      Family: mysql8.0
      Parameters:
        binlog_format: ROW

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: SourcePostGreSQL
      DBName: a4lwordpress
      DBInstanceClass: db.t3.micro
      Engine: MYSQL
      EngineVersion: '8.0.35'
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref awsSecurityGroupDB 
      PubliclyAccessible: false
      MultiAZ: false
      StorageType: gp2
      AllocatedStorage: 20
      Tags:
        - Key: ENV
          Value: DEV
      DBParameterGroupName: !Ref DBParameterGroup
